{
  "_": {
    "postman_id": "f3c03dac-7fe0-440c-af30-998bd5b1f178"
  },
  "item": [
    {
      "id": "df7e579a-0ffc-4e51-8987-d3f74fe8e738",
      "name": "/products",
      "request": {
        "name": "/products",
        "description": {
          "type": "text/plain"
        },
        "url": {
          "path": [
            "products"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "method": "GET"
      },
      "response": [
        {
          "_": {
            "postman_previewlanguage": "json"
          },
          "id": "5c0a1189-295c-4310-bdfb-8edf70d9dc79",
          "name": "The request succeded and results are in the response message.",
          "originalRequest": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-API-KEY",
                "value": "<API Key>"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[]",
          "cookie": []
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "0416a36e-a53e-401a-bb32-655539416629",
            "type": "text/javascript",
            "exec": [
              "// Validate status 2xx \npm.test(\"[GET]::/products - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
              "// Validate if response header has matching content-type\npm.test(\"[GET]::/products - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
              "// Validate if response has JSON Body \npm.test(\"[GET]::/products - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
              "// Response Validation\nconst schema = {\"type\":\"array\",\"items\":{\"description\":\"Product\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"name\"],\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/products - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\"]});\n});\n"
            ]
          }
        }
      ]
    },
    {
      "id": "20fc8ba2-dfbb-4340-be5f-c5c4206ea2be",
      "name": "/products",
      "request": {
        "name": "/products",
        "description": {
          "type": "text/plain"
        },
        "url": {
          "path": [
            "products"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "body": {
          "mode": "raw",
          "raw": "{\n    \"id\": \"amet deserunt commodo ea mollit\",\n    \"name\": \"ad \"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "_": {
            "postman_previewlanguage": "json"
          },
          "id": "e5c0f7fa-74ea-486f-a30e-5d6275b1acf7",
          "name": "The request succeeded and created a new resource.",
          "originalRequest": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-API-KEY",
                "value": "<API Key>"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"amet deserunt commodo ea mollit\",\n    \"name\": \"ad \"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n \"id\": \"et Excepteur\"\n}",
          "cookie": []
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "27275c2e-46e3-4cb6-ba99-b4c2825a050e",
            "type": "text/javascript",
            "exec": [
              "// Validate status 2xx \npm.test(\"[POST]::/products - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
              "// Validate if response header has matching content-type\npm.test(\"[POST]::/products - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
              "// Validate if response has JSON Body \npm.test(\"[POST]::/products - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
              "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"]}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/products - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\"]});\n});\n",
              "// Set response object as internal variable\nlet jsonData = {};\ntry {jsonData = pm.response.json();}catch(e){}\n",
              "// pm.collectionVariables - Set newProductId as variable for jsonData.id\nif (jsonData?.id) {\n   pm.collectionVariables.set(\"newProductId\", jsonData.id);\n   console.log(\"- use {{newProductId}} as collection variable for value\",jsonData.id);\n} else {\n   console.log('INFO - Unable to assign variable {{newProductId}}, as jsonData.id is undefined.');\n};\n"
            ]
          }
        }
      ]
    },
    {
      "id": "0fc9ee4b-70d8-4f80-8120-3d1b75b831ca",
      "name": "/products/:productId",
      "request": {
        "name": "/products/:productId",
        "description": {
          "type": "text/plain"
        },
        "url": {
          "path": [
            "products",
            ":productId"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "description": {
                "content": "(Required) ",
                "type": "text/plain"
              },
              "type": "string",
              "value": "{{newProductId}}",
              "key": "productId"
            }
          ]
        },
        "method": "GET"
      },
      "response": [
        {
          "_": {
            "postman_previewlanguage": "json"
          },
          "id": "e65eba9e-11ff-4680-bec0-440dd0707682",
          "name": "Product",
          "originalRequest": {
            "url": {
              "path": [
                "products",
                ":productId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "dolor cillum aute sit do",
                  "key": "productId"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-API-KEY",
                "value": "<API Key>"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n \"name\": \"Lorem sit officia\",\n \"id\": \"ullamco cillum sit incididunt laboris\"\n}",
          "cookie": []
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "6fad9302-6317-45eb-bee2-97fb68f9ae9e",
            "type": "text/javascript",
            "exec": [
              "// Validate status 2xx \npm.test(\"[GET]::/products/:productId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
              "// Validate if response header has matching content-type\npm.test(\"[GET]::/products/:productId - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
              "// Validate if response has JSON Body \npm.test(\"[GET]::/products/:productId - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
              "// Response Validation\nconst schema = {\"type\":\"object\",\"required\":[\"name\"],\"properties\":{\"id\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/products/:productId - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\"]});\n});\n"
            ]
          }
        }
      ]
    },
    {
      "id": "940d6006-a1e5-4616-967f-78e054232647",
      "name": "/products/:productId",
      "request": {
        "name": "/products/:productId",
        "description": {
          "type": "text/plain"
        },
        "url": {
          "path": [
            "products",
            ":productId"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "description": {
                "content": "(Required) ",
                "type": "text/plain"
              },
              "type": "string",
              "value": "{{newProductId}}",
              "key": "productId"
            }
          ]
        },
        "method": "PUT"
      },
      "response": [
        {
          "_": {
            "postman_previewlanguage": "text"
          },
          "id": "05856782-dbe3-4243-8b5c-be679657e8f1",
          "name": "The product was updated",
          "originalRequest": {
            "url": {
              "path": [
                "products",
                ":productId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "dolor cillum aute sit do",
                  "key": "productId"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-API-KEY",
                "value": "<API Key>"
              }
            ],
            "method": "PUT",
            "body": {}
          },
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": []
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "e79e3e93-1662-4cc2-9fb8-263eb7f6f0f8",
            "type": "text/javascript",
            "exec": [
              "// Validate status 2xx \npm.test(\"[PUT]::/products/:productId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n"
            ]
          }
        }
      ]
    },
    {
      "id": "4d85d00b-6d26-4e5e-ab94-9a6f6c14ad96",
      "name": "/products/:productId",
      "request": {
        "name": "/products/:productId",
        "description": {
          "type": "text/plain"
        },
        "url": {
          "path": [
            "products",
            ":productId"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "disabled": false,
              "description": {
                "content": "(Required) ",
                "type": "text/plain"
              },
              "type": "string",
              "value": "{{newProductId}}",
              "key": "productId"
            }
          ]
        },
        "method": "DELETE"
      },
      "response": [
        {
          "_": {
            "postman_previewlanguage": "text"
          },
          "id": "9b33e060-b1a8-4a44-90b0-111c090cf9e6",
          "name": "The product was deleted",
          "originalRequest": {
            "url": {
              "path": [
                "products",
                ":productId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "dolor cillum aute sit do",
                  "key": "productId"
                }
              ]
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "X-API-KEY",
                "value": "<API Key>"
              }
            ],
            "method": "DELETE",
            "body": {}
          },
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": []
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "9ef5d1d2-96b6-4532-acd6-f35ac2f66f4b",
            "type": "text/javascript",
            "exec": [
              "// Validate status 2xx \npm.test(\"[DELETE]::/products/:productId - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n"
            ]
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "type": "any",
        "value": "X-API-KEY",
        "key": "key"
      },
      {
        "type": "any",
        "value": "dFnm3Z3UEdaBOcw6NDqrKa7Fsk96Nosz4m5zi71A",
        "key": "value"
      },
      {
        "type": "any",
        "value": "header",
        "key": "in"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "1136feb8-064a-436d-9d02-e50730d06f90",
        "type": "text/javascript",
        "exec": []
      }
    }
  ],
  "variable": [
    {
      "type": "string",
      "value": "https://kkyi46yfn1.execute-api.us-east-1.amazonaws.com/Lambdaless",
      "key": "baseUrl"
    }
  ],
  "info": {
    "_postman_id": "f3c03dac-7fe0-440c-af30-998bd5b1f178",
    "name": "Products API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}